name: Build and Push Frontend Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.js'
      - 'Dockerfile'
      - '.github/workflows/frontend-docker.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.js'
      - 'Dockerfile'

env:
  DOCKER_IMAGE: iyuyisenga/cherry-app-frontend-test

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: DOCKER_IMAGE

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get latest version tag and increment
      id: get_version
      run: |
        git fetch --tags
        latest_tag=$(git tag --sort=-v:refname | grep '^v' | head -n 1)

        if [[ -z "$latest_tag" ]]; then
          new_tag="v0.0.1"
        else
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          patch=$((patch + 1))
          new_tag="v${major}.${minor}.${patch}"
        fi

        echo "Latest tag: $latest_tag"
        echo "New tag: $new_tag"
        echo "tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.get_version.outputs.tag }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image digest
      run: echo ${{ steps.build-and-push.outputs.digest }}

    - name: Create Git tag
      if: github.ref == 'refs/heads/main'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}
        git tag ${{ steps.get_version.outputs.tag }}
        git push origin ${{ steps.get_version.outputs.tag }}

